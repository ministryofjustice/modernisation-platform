name: Access Key Monitoring and Cleanup

on:
  schedule:
    - cron: '30 7 * * MON'  # trigger every Monday at 07:30am
  workflow_dispatch:

env:
    AWS_REGION: "eu-west-2"
    TEMPLATE_ID: "1f0f5ccc-0f67-4ee2-942f-6e48804828ea"
    EXPECTED_TEMPLATE_VERSION: "1"  # Update with your expected template version

permissions:
    id-token: write # This is required for requesting the JWT
    contents: read # This is required for actions/checkout
    issues: write # This is required to create issues

jobs:

  fetch-secrets:
    uses: ministryofjustice/modernisation-platform-github-actions/.github/workflows/aws-secrets-management.yml@39db49635a1a20aee7dcffce535321cd01760135 # v3.4.5
    secrets:
      MODERNISATION_PLATFORM_ACCOUNT_NUMBER: ${{ secrets.MODERNISATION_PLATFORM_ACCOUNT_NUMBER }}
      PASSPHRASE: ${{ secrets.PASSPHRASE }}  

  delete-superadmin-access-keys:
    runs-on: ubuntu-latest
    needs: fetch-secrets
    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Step 1.1: Decrypt Secrets
      - name: Decrypt Secrets
        uses: ministryofjustice/modernisation-platform-github-actions/decrypt-secrets@39db49635a1a20aee7dcffce535321cd01760135 # v3.4.5
        with:
          environment_management: ${{ needs.fetch-secrets.outputs.environment_management }}
          gov_uk_notify_api_key: ${{ needs.fetch-secrets.outputs.gov_uk_notify_api_key }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}

      # Step 2: Install Python
      - name: Install Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'

      # Step 3: Install the Notifications Client
      - name: Install the client
        run: pip install notifications-python-client

      # Step 4: Validate Notify Template Version
      - name: Validate Notify Template Version
        env:
          API_KEY: ${{ env.GOV_UK_NOTIFY_API_KEY }}
          TEMPLATE_ID: ${{ env.TEMPLATE_ID }}
          EXPECTED_TEMPLATE_VERSION: ${{ env.EXPECTED_TEMPLATE_VERSION }}
        run: |
          python <<EOF
          from notifications_python_client.notifications import NotificationsAPIClient
          import sys

          api_key = "${{ env.GOV_UK_NOTIFY_API_KEY }}"
          template_id = "${{ env.TEMPLATE_ID }}"
          expected_version = int("${{ env.EXPECTED_TEMPLATE_VERSION }}")

          client = NotificationsAPIClient(api_key)
          try:
              template_details = client.get_template(template_id)
              actual_version = template_details.get("version")

              if actual_version != expected_version:
                  print(f"Error: Template version mismatch! Expected: {expected_version}, Actual: {actual_version}")
                  sys.exit(1)

              print(f"Template version {actual_version} validated successfully.")
          except Exception as e:
              print(f"Failed to fetch template details: {e}")
              sys.exit(1)
          EOF

      # Step 5: Set Account Number
      - name: Set Account Number
        run: |
          ACCOUNT_NUMBER=$(jq -r -e '.modernisation_platform_account_id' <<< $ENVIRONMENT_MANAGEMENT)
          echo "::add-mask::$ACCOUNT_NUMBER"
          echo ACCOUNT_NUMBER=$ACCOUNT_NUMBER >> $GITHUB_ENV

      # Step 6: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions-apply"
          role-session-name: githubactionsrolesession
          aws-region: ${{ env.AWS_REGION }}

      # Step 7: Remove Collaborator Access Keys
      - name: Remove Collaborator Access Keys
        run: bash ./scripts/iam-monitoring/access-key-monitoring/delete_access_keys.sh
        env:
          threshold: 90
          group_name: "collaborators"

      # Step 8: Remove Superadmin Access Keys
      - name: Remove Superadmin Access Keys
        run: bash ./scripts/iam-monitoring/access-key-monitoring/delete_access_keys.sh
        env:
          threshold: 30
          group_name: "superadmins"

      # Step 9: Send Notification
      - name: Send Notification
        run: |
          if [ -s superadmins.list ]; then
            python ./scripts/iam-monitoring/access-key-monitoring/notify_access_key_deletion.py superadmins.list
          else
            echo "No superadmin access keys found inactive for 30 days or more."
          fi
