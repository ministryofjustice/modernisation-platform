name: Environment Request

on:
  issues:
    types: [opened]

permissions: read-all

jobs:
  handle-request:
    permissions:
      contents: write
      pull-requests: write
      security-events: write 
    if: contains(github.event.issue.labels.*.name, 'New Account')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Save issue body to file
        run: |
          echo "${{ github.event.issue.body }}" > issue_body.txt
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV

      - name: Extract fields from issue
        run: |
          EXISTING_ACCOUNT=$(awk -v key="### Is this an existing AWS account?" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          APP_NAME=$(awk -v key="### Application Name" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          APP_TAG=$(awk -v key="### application" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          BUSINESS_UNIT=$(awk -v key="### business-unit" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          INFRA_SUPPORT=$(awk -v key="### infrastructure-support" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          OWNER=$(awk -v key="### owner" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          SSO_GROUP=$(awk -v key="### SSO Group Name" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          ISOLATED_ACCOUNT=$(awk -v key="### Do you require isolated networking?" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          SLACK=$(awk -v key="### Slack Channel" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          GITHUB_OWNERS=$(awk -v key="### GitHub code owner team slug" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
          GITHUB_REVIEWERS=$(awk -v key="### GitHub actions reviewer team slug" '$0==key {while(getline>0){if($0~/^$/)continue;if($0~/^_No response_$/){print "";exit}print $0;exit}}' issue_body.txt | xargs)
      
          echo "EXISTING_ACCOUNT=$EXISTING_ACCOUNT" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_TAG=$APP_TAG" >> $GITHUB_ENV
          echo "BUSINESS_UNIT=$BUSINESS_UNIT" >> $GITHUB_ENV
          echo "INFRA_SUPPORT=$INFRA_SUPPORT" >> $GITHUB_ENV
          echo "OWNER=$OWNER" >> $GITHUB_ENV
          echo "SSO_GROUP=$SSO_GROUP" >> $GITHUB_ENV
          echo "ISOLATED_ACCOUNT=$ISOLATED_ACCOUNT" >> $GITHUB_ENV
          echo "SLACK=$SLACK" >> $GITHUB_ENV
          echo "GITHUB_OWNERS=$GITHUB_OWNERS" >> $GITHUB_ENV
          echo "GITHUB_REVIEWERS=$GITHUB_REVIEWERS" >> $GITHUB_ENV

      - name: Extract environment selections
        run: |
          ENVIRONMENTS=""

          # Development
          DEV_SELECTED=$(awk '/- \[x\] Development/ {print "true"}' issue_body.txt)
          DEV_ACCESS=$(awk -v key="### Environment access level Development" '
            $0==key {found=1; next}
            found && /^### / {exit}
            found && NF && $0!="_No response_" {print $0}
          ' issue_body.txt | paste -sd, -)
          if [ "$DEV_SELECTED" = "true" ]; then
            ENVIRONMENTS="${ENVIRONMENTS}{\"name\": \"development\", \"access_level\": \"$DEV_ACCESS\"},"
          fi

          # Test
          TEST_SELECTED=$(awk '/- \[x\] test/ {print "true"}' issue_body.txt)
          TEST_ACCESS=$(awk -v key="### Environment access level Test" '
            $0==key {found=1; next}
            found && /^### / {exit}
            found && NF && $0!="_No response_" {print $0}
          ' issue_body.txt | paste -sd, -)
          if [ "$TEST_SELECTED" = "true" ]; then
            ENVIRONMENTS="${ENVIRONMENTS}{\"name\": \"test\", \"access_level\": \"$TEST_ACCESS\"},"
          fi

          # Preproduction
          PREPROD_SELECTED=$(awk '/- \[x\] Preproduction/ {print "true"}' issue_body.txt)
          PREPROD_ACCESS=$(awk -v key="### Environment access level Preproduction" '
            $0==key {found=1; next}
            found && /^### / {exit}
            found && NF && $0!="_No response_" {print $0}
          ' issue_body.txt | paste -sd, -)
          if [ "$PREPROD_SELECTED" = "true" ]; then
            ENVIRONMENTS="${ENVIRONMENTS}{\"name\": \"preproduction\", \"access_level\": \"$PREPROD_ACCESS\"},"
          fi

          # Production
          PROD_SELECTED=$(awk '/- \[x\] Production/ {print "true"}' issue_body.txt)
          PROD_ACCESS=$(awk -v key="### Environment access level Production" '
            $0==key {found=1; next}
            found && /^### / {exit}
            found && NF && $0!="_No response_" {print $0}
          ' issue_body.txt | paste -sd, -)
          if [ "$PROD_SELECTED" = "true" ]; then
            ENVIRONMENTS="${ENVIRONMENTS}{\"name\": \"production\", \"access_level\": \"$PROD_ACCESS\"},"
          fi

          # Remove trailing comma and wrap in brackets
          ENV_SELECTIONS_JSON="[$(echo $ENVIRONMENTS | sed 's/,$//')]"
          echo "ENV_SELECTIONS_JSON=$ENV_SELECTIONS_JSON" >> $GITHUB_ENV

      - name: Create and checkout branch for environment request
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run create-account.py for new accounts
        if: env.EXISTING_ACCOUNT == 'No'
        run: |
          ls -l scripts
          python scripts/create-account.py "$APP_NAME" "$APP_TAG" "$GITHUB_OWNERS" "$GITHUB_REVIEWERS" "$BUSINESS_UNIT" "$INFRA_SUPPORT" "$OWNER" "$SLACK" "false" "$SSO_GROUP" "" "$ENV_SELECTIONS_JSON"

      - name: Run amend-accounts.py for existing accounts
        if: env.EXISTING_ACCOUNT == 'Yes'
        run: |
          python scripts/amend-accounts.py \
            "$APP_NAME" \
            "$SSO_GROUP" \
            "$ENV_SELECTIONS_JSON"
            # Add other arguments as needed for your amend script

      - name: remove issue template files
        run: rm -f issue_body.txt

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh
  
      - name: Create a signed commit for new accounts
        if: env.EXISTING_ACCOUNT == 'No'
        uses: ministryofjustice/modernisation-platform-github-actions/signed-commit@e3ccf33927794ce5350b9211e288ad84e69365a8 # v3.4.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: "Automated environment request for $APP_NAME"
          pr_body: "This PR was created automatically to update generated files. Linked to #${{ github.event.issue.number }}"


      - name: Commit changes for existing accounts
        if: env.EXISTING_ACCOUNT == 'Yes'
        uses: ministryofjustice/modernisation-platform-github-actions/signed-commit@e3ccf33927794ce5350b9211e288ad84e69365a8 # v3.4.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: "Automated environment amendment request for $APP_NAME"
          pr_body: "This PR was created automatically to update generated files. Linked to #${{ github.event.issue.number }}"


      - name: Comment on issue with PR link
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE="Automated environment amendment request for $APP_NAME"
          PR_URL=$(gh pr list --state open --search "$PR_TITLE in:title" --json url -q '.[0].url')
          echo "PR URL: $PR_URL"
          REPO="${{ github.repository }}"
          gh issue comment $ISSUE_NUMBER --repo "$REPO" --body "A pull request has been created for your environment request: $PR_URL"
      
      - name: Save network setup info
        run: |
          echo "{\"pr_number\": ${{ github.event.pull_request.number }}, ISOLATED_ACCOUNT, \"app_name\": \"$APP_NAME\", \"business_unit\": \"$BUSINESS_UNIT\", \"environments\": $(echo $ENV_SELECTIONS_JSON | jq -c 'map(.name)')}" > network-setup-info.json
      - uses: actions/upload-artifact@v4
        with:
          name: network-setup-info
          path: network-setup-info.json
