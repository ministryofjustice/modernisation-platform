---
name: core-security-deployment

on: 
  push:
    branches:
      - main
    paths:
      - 'terraform/environments/core-security/**'
      - 'terraform/modules/vpc-hub/**'
      - '.github/workflows/core-security-deployment.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/environments/core-security/**'
      - 'terraform/modules/vpc-hub/**'
      - '.github/workflows/core-security-deployment.yml'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_IN_AUTOMATION: true

defaults:
  run:
    shell: bash

jobs:
  core-security-deployment-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false
 
      - name: Run terraform plan in terraform/environments/core-security
        run: |
          git_dir=`git rev-parse --show-toplevel`

          # Test if this is a PR or PULL event
          if [ ! -z ${{ github.event.pull_request.number }} ]
          then
          #CONFIGURE TERRAFORM AND WORKSPACE
          bash scripts/terraform-init.sh terraform/environments/core-security
          terraform -chdir="terraform/environments/core-security" workspace select core-security-production

          #RUN TERRATEST
          pushd terraform/environments/core-security/test
          # Install GOLANG 15.8
          if [ `whoami` != "runner" ]
          then
          wget -q https://dl.google.com/go/go1.15.8.linux-amd64.tar.gz
          tar -zxvf go1.15.8.linux-amd64.tar.gz
          sudo mv go /usr/local
          echo "--  running newly installed go  --"
          TEST=`/usr/local/go/bin/go test | ${git_dir}/scripts/redact-output.sh | tee /dev/stderr | tail -n 1`
          else
          echo "--  running native go  --"
          TEST=`go test | ${git_dir}/scripts/redact-output.sh | tee /dev/stderr | tail -n 1`
          fi
          popd
          TEST="> TERRATEST RESULT - core-security
          ${TEST}"
          bash scripts/update-pr-comments.sh "${TEST}"

          #RUN TERRAFORM PLAN
          PLAN=`bash scripts/terraform-plan.sh terraform/environments/core-security | tee /dev/stderr | grep '^Plan: \|^No changes.'`
          PLAN="> TERRAFORM PLAN RESULT - core-security
          ${PLAN}"
          bash scripts/update-pr-comments.sh "${PLAN}"
          fi
        env:
          SECRET: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}

  core-security-deployment-apply:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main'
    needs: [core-security-deployment-plan]
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Run Terraform apply in terraform/environments/core-security
        run: |
          bash scripts/terraform-init.sh terraform/environments/core-security
          terraform -chdir="terraform/environments/core-security" workspace select core-security-production
          bash scripts/terraform-apply.sh terraform/environments/core-security
      - uses: 8398a7/action-slack@v3
        name: Slack failure notification
        with:
          status: ${{ job.status }}
          fields: workflow,job,repo,commit,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() }}
