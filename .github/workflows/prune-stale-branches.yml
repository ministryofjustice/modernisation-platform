name: Cleanup of Stale Branches (Deletes if branch and commits are 2+ months old)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - feature-9556-auto-pruning-stale-branches

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  fetch-secrets:
    uses: ministryofjustice/modernisation-platform-github-actions/.github/workflows/aws-secrets-management.yml@14db114ed50a5ab565c3a134cf9efac0627e75e6 # v1.1.1
    secrets:
      MODERNISATION_PLATFORM_ACCOUNT_NUMBER: ${{ secrets.MODERNISATION_PLATFORM_ACCOUNT_NUMBER }}
      PASSPHRASE: ${{ secrets.PASSPHRASE }}

  cleanup:
    name: Cleanup Stale Branches in Modernisation Platform Repos
    runs-on: ubuntu-latest
    needs: fetch-secrets

    steps:
      - name: Ensure CLI tools are installed
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Decrypt Secrets
        id: decrypt
        uses: ministryofjustice/modernisation-platform-github-actions/decrypt-secrets@14db114ed50a5ab565c3a134cf9efac0627e75e6
        with:
          terraform_github_token: ${{ needs.fetch-secrets.outputs.MODERNISATION_PAT_MULTIREPO }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}

      - name: Dump all step outputs for decrypt-secrets
        run: |
          echo "🔎 Outputs from decrypt step:"
          echo "terraform_github_token=${{ steps.decrypt.outputs.terraform_github_token }}"
          echo "MODERNISATION_PAT_MULTIREPO=${{ steps.decrypt.outputs.MODERNISATION_PAT_MULTIREPO }}"
          echo "token=${{ steps.decrypt.outputs.token }}"
          echo "raw=${{ steps.decrypt.outputs.raw }}"

      - name: Dump environment (debug)
        run: env

      - name: Debug Decrypted Token Length
        run: |
          token="${{ steps.decrypt.outputs.terraform_github_token }}"
          if [[ -z "$token" ]]; then
            echo "❌ Decrypted token is empty!"
            exit 1
          fi
          echo "✅ Decrypted token retrieved. Length: ${#token}"

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ steps.decrypt.outputs.terraform_github_token }}" | gh auth login --with-token || {
            echo "❌ Failed to authenticate with GitHub CLI."
            exit 1
          }

      - name: Verify Authentication
        run: |
          gh auth status || {
            echo "❌ Authentication verification failed."
            exit 1
          }

      - name: Cleanup stale branches across repositories
        run: |
          set -eo pipefail
          DEBUG=false
          DRY_RUN=false

          exclude_repos=(
            "modernisation-platform-environments"
            "modernisation-platform-ami-builds"
            "modernisation-platform-configuration-management"
          )

          repos=$(gh repo list ministryofjustice --limit 1000 --json name,isArchived --jq '.[] | select(.name | startswith("modernisation-platform")) | select(.isArchived == false) | .name')

          for repo in $repos; do
            if [[ " ${exclude_repos[@]} " =~ " $repo " ]]; then
              echo "⏭️ Skipping excluded repository: $repo"
              continue
            fi

            echo ""
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔍 STARTING REPO: ministryofjustice/$repo"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            {
              branches=$(gh api repos/ministryofjustice/$repo/branches --jq '.[].name')
              repo_summary="| Branch | Status | Reason |\n|--------|--------|--------|"
              for branch in $branches; do
                if [[ "$branch" == "main" ]]; then
                  repo_summary+="\n| \`$branch\` | ⏭️ Skipped | Main branch |"
                  continue
                fi

                allow_delete=$(gh api repos/ministryofjustice/$repo/branches/$branch/protection --silent 2>/dev/null | jq -r '.allow_deletions.enabled // "true"')
                if [[ "$allow_delete" == "false" ]]; then
                  repo_summary+="\n| \`$branch\` | ⏭️ Skipped | Protected from deletion |"
                  continue
                fi

                if gh api repos/ministryofjustice/$repo/git/ref/tags/do-not-prune/$branch --silent >/dev/null 2>&1; then
                  repo_summary+="\n| \`$branch\` | ⏭️ Skipped | Tagged do-not-prune |"
                  continue
                fi

                last_commit_date=$(gh api "repos/ministryofjustice/$repo/commits?sha=$branch" --jq '.[0].commit.committer.date' || echo "")
                last_commit_timestamp=$(date -d "$last_commit_date" +%s 2>/dev/null || echo 0)
                two_months_ago_timestamp=$(date -d "2 months ago" +%s)

                if [[ "$last_commit_timestamp" -eq 0 || "$last_commit_timestamp" -ge "$two_months_ago_timestamp" ]]; then
                  repo_summary+="\n| \`$branch\` | ✅ Active | Recent commit |"
                  continue
                fi

                first_commit=$(gh api "repos/ministryofjustice/$repo/commits?sha=$branch" --paginate --jq '.[].commit.committer.date' | tail -n 1)
                branch_creation_timestamp=$(date -d "$first_commit" +%s 2>/dev/null || echo 0)

                if [[ "$branch_creation_timestamp" -eq 0 || "$branch_creation_timestamp" -ge "$two_months_ago_timestamp" ]]; then
                  repo_summary+="\n| \`$branch\` | ⏭️ Skipped | Too new |"
                  continue
                fi

                echo "🗑️ Deleting branch: $branch from ministryofjustice/$repo"
                if [[ "$DRY_RUN" == "true" ]]; then
                  echo "Dry Run: Skipping actual deletion of branch $branch"
                  repo_summary+="\n| \`$branch\` | 📝 Dry Run | Branch and commits are 2+ months old |"
                else
                  if gh api -X DELETE repos/ministryofjustice/$repo/git/refs/heads/$branch; then
                    repo_summary+="\n| \`$branch\` | 🔥 Deleted | Branch and commits are 2+ months old |"
                  else
                    repo_summary+="\n| \`$branch\` | ⚠️ Failed | GitHub API deletion failed |"
                  fi
                fi
              done

              echo -e "$repo_summary"
              echo "✅ DONE with ministryofjustice/$repo"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            } || {
              echo "❌ Failed to process ministryofjustice/$repo — skipping to next."
              continue
            }
          done
