---
name: core-vpc-preproduction-deployment

on:
  push:
    branches:
      - main
    paths:
      - 'environments-networks/*-preproduction.json'
      - '.github/workflows/core-vpc-preproduction-deployment.yml'
      - 'terraform/environments/**/networking.auto.tfvars.json'
      - 'terraform/environments/**/subnet-share.tf'
      - '!terraform/environments/core-*/**'
      - 'terraform/environments/core-vpc/**'
  pull_request:
    branches:
      - main
    paths:
      - 'environments-networks/*-preproduction.json'
      - '.github/workflows/core-vpc-preproduction-deployment.yml'
      - 'terraform/environments/**/networking.auto.tfvars.json'
      - 'terraform/environments/**/subnet-share.tf'
      - '!terraform/environments/core-*/**'
      - 'terraform/environments/core-vpc/**'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_IN_AUTOMATION: true
  TF_ENV: "preproduction"

defaults:
  run:
    shell: bash

jobs:
  core-vpc-preproduction-deployment-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Run core-vpc terraform plan
        run: |
          # Test if this is a PR or PULL event

          #USE IF RUNNING IN GITHUB ACTIONS
          if [ ! -z ${{ github.event.pull_request.number }} ]
          then

          #USE IF USING ACT
          # if [ ! -z ${PULL_REQUEST_NUMBER} ]
          # then

          #CONFIGURE TERRAFORM AND WORKSPACE
          bash scripts/terraform-init.sh terraform/environments/core-vpc
          terraform -chdir="terraform/environments/core-vpc" workspace select "core-vpc-${TF_ENV}"

          #RUN TERRAFORM PLAN
          PLAN=`bash scripts/terraform-plan.sh terraform/environments/core-vpc "-target=module.vpc -target=module.vpc_tgw_routing -target=module.core-vpc-tgw-routes -target=module.dns-zone -target=module.dns_zone_extend -target=module.vpc_nacls -target=module.pagerduty_core_alerts" | tee /dev/stderr | grep '^Plan: \|^No changes.'`
          PLAN="> TERRAFORM PLAN RESULT - core-vpc - ${TF_ENV}
          ${PLAN}"
          bash scripts/update-pr-comments.sh "${PLAN}"
          fi
        env:
          SECRET: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}

  core-vpc-preproduction-deployment-apply:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main'
    needs: [ core-vpc-preproduction-deployment-plan ]
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Run Terraform apply in terraform/environments/core-vpc
        run: |
          bash scripts/terraform-init.sh terraform/environments/core-vpc
          terraform -chdir="terraform/environments/core-vpc" workspace select "core-vpc-${TF_ENV}"
          bash scripts/terraform-apply.sh terraform/environments/core-vpc -target=module.vpc
          echo "Target apply finished"
          bash scripts/terraform-apply.sh terraform/environments/core-vpc
          echo "Terraform apply finished"
      - uses: 8398a7/action-slack@v3
        name: Slack failure notification
        with:
          status: ${{ job.status }}
          fields: workflow,job,repo,commit,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() }}


  member-account-ram-associaton:
    runs-on: [ ubuntu-latest ]
    if: github.event.ref == 'refs/heads/main'
    needs: [ core-vpc-preproduction-deployment-apply ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get changed files
        id: new_account
        run: |
          echo "::set-output name=files::$(git diff --no-commit-id --name-only -r @^ | awk '{print $1}' | grep "environments-networks//*" | grep "${TF_ENV}" | uniq | xargs jq  ".cidr.subnet_sets[].accounts[]" | xargs)"
      - name: Set RAM assocation for member account
        run: |
          accounts=(${{ steps.new_account.outputs.files }})
          if [ ! -z ${accounts} ]
          then
          for i in "${accounts[@]}"
          do
          echo "[+] Setting up RAM asocation for ${i}"
          bash scripts/member-account-ram-association.sh ${i} ${TF_ENV}
          done
          else
          echo "[+] There were no AWS member accounts to process"
          exit 0
          fi
      - uses: 8398a7/action-slack@v3
        name: Slack failure notification
        with:
          status: ${{ job.status }}
          fields: workflow,job,repo,commit,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() }}
