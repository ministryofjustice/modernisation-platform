
name: 'Format Code: ensure code formatting guidelines are met'

on:
  workflow_dispatch: null
  schedule:
    - cron: 45 4 * * 1-5

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: '${{ github.ref }}-${{ github.workflow }}'
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          fetch-depth: 0

      - name: Prepare Git options
        run: bash ./scripts/git-setup.sh

      - name: Create new branch
        run: |
          date=$(date +%Y_%m_%d_%H_%M)
          branch_name="code_formatter_$date"
          git checkout -b $branch_name
          echo "branch_name=$branch_name" >> $GITHUB_ENV
          # Push the empty branch to remote
          git push -u origin $branch_name 


      - name: Run linter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: oxsecurity/megalinter/flavors/terraform@c217fe8f7bc9207062a084e989bd97efd56e7b9a #v8.0.0
        env:
          # All available variables are described in documentation
          # https://megalinter.io/configuration/#shared-variables
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
          APPLY_FIXES_EVENT: all # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
          APPLY_FIXES_MODE: pull_request # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)
          DISABLE_ERRORS: true
          EMAIL_REPORTER: false
          ENABLE_LINTERS: JSON_PRETTIER,YAML_PRETTIER,TERRAFORM_TERRAFORM_FMT,MARKDOWN_MARKDOWNLINT
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          VALIDATE_ALL_CODEBASE: true
          YAML_PRETTIER_FILTER_REGEX_EXCLUDE: (.github/*)
          MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE: (terraform/modules/.*/.*.md)
          REPORT_OUTPUT_FOLDER: none
          
      - name: Check for changes
        run: |
          # Show the git status, stage any changes and then test whether changes were detected.
          echo "===== Git Status ====="
          git status
          echo "===== Stage changes ====="
          git add .
          changes=$(git diff --staged --name-only)
          if [ -z "$changes" ]; then
            echo "No changes detected."
            echo "Exiting workflow using status 0 without reporting an error"
            exit 0
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_ENV
            git diff --staged --name-only > changed_files.txt
          fi

      - name: Generate the Signed Commit
        if: env.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Store the current commit OID and branch name
          commit_oid=$(git rev-parse HEAD)
          # Fetch the repository ID using GitHub CLI
          repo_id=$(gh api graphql -f query='
          query {
            repository(owner:"ministryofjustice", name:"modernisation-platform") {
              id
            }
          }' --jq '.data.repository.id')
          echo "Repository ID: $repo_id"

          # Prepare the list of changed files for commit
          files_for_commit=$(jq -Rn '
            [inputs | { "path": ., "contents": (inputs | @base64) }] 
          ' < changed_files.txt)
          echo "Files for commit: $files_for_commit"

          # Create the GraphQL mutation payload
          mutation_payload=$(jq -n \
            --arg branch_name "$branch_name" \
            --arg commit_oid "$commit_oid" \
            --arg repo_id "$repo_id" \
            --arg commit_message "Automated code formatting fixes" \
            --argjson files_for_commit "$files_for_commit" \
            '{query: "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
            variables: {
              input: {
                branch: {
                  repositoryNameWithOwner: "ministryofjustice/modernisation-platform",
                  branchName: $branch_name
                },
                message: {
                  headline: $commit_message
                },
                fileChanges: {
                  additions: $files_for_commit
                },
                expectedHeadOid: $commit_oid
              }
            }
          }')

          # Send the mutation request to GitHub's GraphQL API
          curl -X POST -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$mutation_payload" https://api.github.com/graphql
        

      - name: Create pull request
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pr_title="GitHub Actions Code Formatter workflow"
          pr_body="This pull request includes updates from the GitHub Actions Code Formatter workflow. Please review the changes and merge if everything looks good."
          branch_name=$(git branch --show-current)
          pr_head="${{ github.repository_owner }}:${branch_name}"
          pr_base="main"
          gh pr create --title "$pr_title" --body "$pr_body" --head "$pr_head" --base "$pr_base" --label "code quality"