# GuardDuty Malware Protection Plan
resource "aws_guardduty_malware_protection_plan" "malware_protection_plan" {
  for_each = toset([
    module.s3-bucket.bucket.id,
    module.s3-software-bucket.bucket.id
  ])

  role = data.aws_iam_role.guardduty_malware_protection_role.arn

  protected_resource {
    s3_bucket {
      bucket_name = each.key
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }

  tags = {
    "Name" = "GuardDutyMalwareProtectionPlan-${each.key}" # Unique tag for each bucket
  }
}

data "aws_iam_role" "guardduty_malware_protection_role" {
  name = "GuardDutyS3MalwareProtectionRole"
}
###  S3 Malware Scan Alerts using GuardDuty Malware Protection Object scan result.

# KMS Key for SNS Encryption
resource "aws_kms_key" "sns_kms_key" {
  description         = "KMS key for encrypting SNS malware scan alerts"
  enable_key_rotation = true
}

# Attach an Alias for the KMS Key 
resource "aws_kms_alias" "sns_kms_key_alias" {
  name          = "alias/sns-malware-scan-key"
  target_key_id = aws_kms_key.sns_kms_key.id
}
# Attach the IAM Policy to the KMS Key Separately 
resource "aws_kms_key_policy" "sns_kms_key_policy" {
  key_id = aws_kms_key.sns_kms_key.id
  policy = data.aws_iam_policy_document.sns_kms_key_policy.json
}
data "aws_iam_policy_document" "sns_kms_key_policy" {
  # checkov:skip=CKV_AWS_109: "Key policy requires asterisk resource"
  # checkov:skip=CKV_AWS_111: "Key policy requires asterisk resource"
  # checkov:skip=CKV_AWS_356: "Key policy requires asterisk resource"
  statement {
    sid       = "Allow management access of the key to the core-shared-services-account"
    effect    = "Allow"
    actions   = ["kms:*"]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${local.environment_management.account_ids["core-shared-services-production"]}:root"]
    }
  }

  statement {
    sid    = "AllowSNSandEventBridgeToUseKMSKey"
    effect = "Allow"
    actions = [
      "kms:GenerateDataKey*",
      "kms:Decrypt"
    ]
    resources = ["*"]
    principals {
      type        = "Service"
      identifiers = ["sns.amazonaws.com", "events.amazonaws.com"]
    }
  }
}

# Create an SNS Topic for Malware Alerts
resource "aws_sns_topic" "s3_malware_scan_alerts" {
  #checkov:skip=CKV_AWS_26:"encrypted topics do not work with pagerduty subscription"
  name              = "s3-malware-scan-alerts"
  kms_master_key_id = aws_kms_key.sns_kms_key.arn
}

# link the sns topics to the pagerduty service
module "pagerduty_malware_alerts" {
  depends_on                = [aws_sns_topic.s3_malware_scan_alerts]
  source                    = "github.com/ministryofjustice/modernisation-platform-terraform-pagerduty-integration?ref=d88bd90d490268896670a898edfaba24bba2f8ab" # v3.0.0
  sns_topics                = [aws_sns_topic.s3_malware_scan_alerts.name]
  pagerduty_integration_key = local.pagerduty_integration_keys["core_alerts_cloudwatch"]
}

##  EventBridge Rule for Real-Time Malware Detection Alerts ###
resource "aws_cloudwatch_event_rule" "guardduty_s3_malware_scan" {
  name        = "guardduty-s3-malware-scan"
  description = "Triggers when GuardDuty detects malware in an S3 object"

  event_pattern = <<EOF
{
  "source": ["aws.guardduty"],
  "detail-type": ["GuardDuty Malware Protection Object Scan Result"],
  "detail": {
    "scanResultDetails": {
      "scanResultStatus": ["THREATS_FOUND"]
    }
  }
}
EOF
}

### Connect EventBridge to SNS for PagerDuty Alerts
resource "aws_cloudwatch_event_target" "sns_target" {
  rule      = aws_cloudwatch_event_rule.guardduty_s3_malware_scan.name
  target_id = "SendToSNS"
  arn       = aws_sns_topic.s3_malware_scan_alerts.arn
}

### SNS Topic Policy
resource "aws_sns_topic_policy" "s3_malware_scan_sns_policy" {
  arn    = aws_sns_topic.s3_malware_scan_alerts.arn
  policy = data.aws_iam_policy_document.s3_malware_scan_sns_policy.json
}

###  IAM Policy Document for SNS Permissions 
data "aws_iam_policy_document" "s3_malware_scan_sns_policy" {
  policy_id = "s3 malware scan sns policy"
  statement {
    sid    = "AllowTopicOwnerToManageSNS"
    effect = "Allow"
    actions = [
      "sns:Publish",
      "sns:RemovePermission",
      "sns:SetTopicAttributes",
      "sns:DeleteTopic",
      "sns:ListSubscriptionsByTopic",
      "sns:GetTopicAttributes",
      "sns:AddPermission",
      "sns:Subscribe"
    ]
    resources = [
      aws_sns_topic.s3_malware_scan_alerts.arn
    ]
    condition {
      test     = "StringEquals"
      variable = "AWS:SourceOwner"
      values = [
        local.environment_management.account_ids["core-shared-services-production"]
      ]
    }
    principals {
      type        = "AWS"
      identifiers = ["*"]
    }
  }

  ###  Allow EventBridge to Publish Messages to SNS
  statement {
    sid    = "AllowEventBridgeToPublishToSNS"
    effect = "Allow"
    actions = [
      "sns:Publish"
    ]
    resources = [
      aws_sns_topic.s3_malware_scan_alerts.arn
    ]
    principals {
      type        = "Service"
      identifiers = ["events.amazonaws.com"]
    }
  }
}

