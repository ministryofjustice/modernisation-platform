# Variable to allow bucket selection
variable "buckets_to_protect" {
  description = <<EOF
    Enter the pre-existing bucket names you want to enable malware protection for.
    Bucket names must be separated by commas (e.g., bucket1,bucket2,bucket3).
    To enable for all buckets, list all bucket names here.
  EOF
  type        = string
  default     = "mod-platform-image-artefact-bucket20230203091453221500000001,modernisation-platform-software20230224000709766100000001"
}

# Define the list of buckets to protect
locals {
  bucket_list = toset(split(",", replace(trimspace(var.buckets_to_protect), " ", "")))
}

# GuardDuty Malware Protection Plan
resource "aws_guardduty_malware_protection_plan" "malware_protection_plan" {
  for_each = local.bucket_list

  role = data.aws_iam_role.github_actions_role.arn

  protected_resource {
    s3_bucket {
      bucket_name = each.key
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }

  tags = {
    "Name" = "GuardDutyMalwareProtectionPlan-${each.key}" # Unique tag for each bucket
  }
}


data "aws_iam_role" "github_actions_role" {
  name = "github-actions"
}

###  S3 Malware Scan Alerts using GuardDuty Malware Protection Object scan result.

# Create an SNS Topic for Malware Alerts
resource "aws_sns_topic" "s3_malware_scan_alerts" {
  name = "s3-malware-scan-alerts"
}

# link the sns topics to the pagerduty service
module "pagerduty_core_alerts" {
  depends_on = [
    aws_sns_topic.s3_malware_scan_alerts
  ]
  source                    = "github.com/ministryofjustice/modernisation-platform-terraform-pagerduty-integration?ref=0179859e6fafc567843cd55c0b05d325d5012dc4" # v2.0.0
  sns_topics                = [aws_sns_topic.s3_malware_scan_alerts.name]
  pagerduty_integration_key = local.pagerduty_integration_keys["core_alerts_cloudwatch"]
}

# EventBridge Rule for GuardDuty S3 Malware Scan Alerts
resource "aws_cloudwatch_event_rule" "guardduty_s3_malware_scan" {
  name        = "guardduty-s3-malware-scan"
  description = "Triggers when GuardDuty detects malware in an S3 object"

  event_pattern = <<EOF
{
  "source": ["aws.guardduty"],
  "detail-type": ["GuardDuty Malware Protection Object Scan Result"],
  "detail": {
    "scanResultDetails": {
      "scanResultStatus": ["THREATS_FOUND"]
    }
  }
}
EOF
}

# Link EventBridge Rule to SNS
resource "aws_cloudwatch_event_target" "sns_target" {
  rule      = aws_cloudwatch_event_rule.guardduty_s3_malware_scan.name
  target_id = "SendToSNS"
  arn       = aws_sns_topic.s3_malware_scan_alerts.arn
}

# Allow EventBridge to Publish to SNS
resource "aws_sns_topic_policy" "sns_policy" {
  arn    = aws_sns_topic.s3_malware_scan_alerts.arn
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "events.amazonaws.com"
      },
      "Action": "SNS:Publish",
      "Resource": "${aws_sns_topic.s3_malware_scan_alerts.arn}"
    }
  ]
}
EOF
}