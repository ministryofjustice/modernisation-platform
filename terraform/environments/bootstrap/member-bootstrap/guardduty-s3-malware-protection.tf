# GuardDuty Malware Protection Role

module "guardduty_malware_protection_role" {
  # checkov:skip=CKV_TF_1:
  count  = local.account_data.account-type == "member" || local.account_data.account-type == "core" ? 1 : 0
  source = "github.com/terraform-aws-modules/terraform-aws-iam//modules/iam-assumable-role?ref=0792d7f2753c265e3d610a58348fa1c551cbe4b8" # v5.59.0

  trusted_role_services = [
    "malware-protection-plan.guardduty.amazonaws.com"
  ]
  create_role       = true
  role_name         = "GuardDutyS3MalwareProtectionRole"
  role_requires_mfa = false

  custom_role_policy_arns = [
    aws_iam_policy.guardduty_policy.arn
  ]
  number_of_custom_role_policy_arns = 1
}

#  Attach IAM policy to the role
resource "aws_iam_role_policy_attachment" "guardduty_malware_protection_attach" {
  count      = local.account_data.account-type == "member" || local.account_data.account-type == "core" ? 1 : 0
  role       = module.guardduty_malware_protection_role[0].iam_role_name
  policy_arn = aws_iam_policy.guardduty_policy.arn
}

# IAM Policy for GuardDuty Malware Protection
resource "aws_iam_policy" "guardduty_policy" {
  name        = "GuardDutyMalwareProtectionPolicy"
  description = "Policy for GuardDuty Malware Protection Plan"
  policy      = data.aws_iam_policy_document.guardduty_malware_protection_policy.json
}

# IAM Policy Document for GuardDuty Malware Protection
data "aws_iam_policy_document" "guardduty_malware_protection_policy" {
  statement {
    sid    = "EventBridgeActionsForGuardDuty"
    effect = "Allow"
    actions = [
      "events:*Rule",
      "events:*Targets",
      "events:DescribeRule",
      "events:ListTargetsByRule"
    ]
    resources = [
    "arn:aws:events:eu-west-2:${local.environment_management.account_ids[terraform.workspace]}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"]
    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }
  statement {
    sid    = "S3ActionsForGuardDuty"
    effect = "Allow"
    actions = [
      "s3:PutObject*",
      "s3:GetObject*",
      "s3:GetBucket*",
      "s3:ListBucket",
      "s3:PutBucketNotification",
      "s3:GetBucketNotification"
    ]
    resources = [
      "arn:aws:s3:::*/malware-protection-resource-validation-object",
      "arn:aws:s3:::*"
    ]
    condition {
      test     = "ForAllValues:StringEqualsIfExists"
      variable = "aws:CalledVia"
      values   = ["guardduty.amazonaws.com"]
    }
  }
  statement {
    sid    = "AllowDecryptForMalwareScan"
    effect = "Allow"
    actions = [
      "kms:GenerateDataKey",
      "kms:Decrypt"
    ]
    resources = ["*"]
    condition {
      test     = "StringLike"
      variable = "kms:ViaService"
      values   = ["s3.eu-west-2.amazonaws.com"]
    }
  }
}
