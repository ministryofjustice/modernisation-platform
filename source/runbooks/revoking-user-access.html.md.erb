---
owner_slack: "#modernisation-platform"
title: Revoking User Access
last_reviewed_on: 2024-02-12
review_in: 6 month
---

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NXTCMQ7ZX6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-NXTCMQ7ZX6');
</script>

# <%= current_page.data.title %>

## Introduction

In the event of a cyber attack or similar malicious activity e.g. some user credentials are compromised, there may be a requirement to revoke user access on the Modernisation Platform (MP).

This page attempts to break down the various users/identities that exist on MP and explain what you would need to do to revoke access.

## Individual IAM Users

### MOJ Member Access

MP members who are MOJ employees access environments using [AWS SSO](https://user-guide.modernisation-platform.service.justice.gov.uk/concepts/environments/single-sign-on.html#single-sign-on)
which links GitHub Teams to various roles/environments.

Removing user access from GitHub Teams etc. is the responsibility of the relevant application team as explained [here](https://user-guide.modernisation-platform.service.justice.gov.uk/user-guide/our-offer-to-you.html#what-we-expect-from-application-teams),
however you could contact the [Ops Engineering](https://moj.enterprise.slack.com/archives/C01BUKJSZD4) team who manage our GitHub organisation who will be able to revoke access.

### Collaborator Access

[Collaborator access](https://user-guide.modernisation-platform.service.justice.gov.uk/user-guide/working-as-a-collaborator.html#working-as-a-collaborator)
is for non-MOJ employees who require access to AWS. These users are defined in the [collaborators.json](https://github.com/ministryofjustice/modernisation-platform/blob/main/collaborators.json) file.

Use [this guide](https://user-guide.modernisation-platform.service.justice.gov.uk/runbooks/adding-collaborators.html#removing-collaborators)
to remove a collaborator (**NB** the Terraform must be run locally as a superadmin user)

### Modernisation Platform Team Access

MP team members access environments using AWS SSO and in very few circumstances via [Superadmin access](https://user-guide.modernisation-platform.service.justice.gov.uk/runbooks/accessing-aws-accounts.html#superuser-account-access)

Removing access for MP team members is documented [here](https://user-guide.modernisation-platform.service.justice.gov.uk/runbooks/removing-a-team-member.html)

We also have a `testing-ci` user, defined in code [here](https://github.com/ministryofjustice/modernisation-platform/blob/ee861412ad30edb0c1ff763b6deeb2992d139f44/terraform/github/testing-ci.tf#L4) which is used for automated tests.
It's access is limited to the testing-test account and essential core resources. To remove this user raise a PR to remove the user or edit the access of the associated policy.

### MOJ Master Users

There are a limited set of users who have access to the Root account ("MOJ Master") for the organisation.

These users are defined in the [root account repo](https://github.com/ministryofjustice/aws-root-account/blob/b47c74781927ffbdb3cfba485d07b05ade7a23b9/management-account/terraform/iam-users.tf)

Any PRs raised to remove a users access would need to be approved by a member of [operations-engineering](https://github.com/orgs/ministryofjustice/teams/operations-engineering) or [aws-root-account-admin-team](https://github.com/orgs/ministryofjustice/teams/aws-root-account-admin-team).

## Teams

GitHub Teams are linked to AWS environments via the `environment/*.json` files in the [MP repo](https://github.com/ministryofjustice/modernisation-platform/tree/main/environments).

To remove a teams' access/association with an AWS environment:

1. Edit the relevant `environment/*.json` file by removing the team name from the `github_slug` definition for the particular environment e.g. `"github_slug": "modernisation-platform",` becomes `"github_slug": "",`

1. Note that only one change to a `environment/*.json` file can be made per PR/run due to current constraints around how the automation works.
1. Raise a PR and once merged the scheduled baseline job will run to update the access accordingly.

## Automation Users (IAM roles/policies)

### Member Roles

#### OIDC CI/CD Role

To allow automated access to MP member environments we provide an optional “OIDC CI/CD” role - `modernisation-platform-oidc-cicd` which is
explained in more detail [here](https://user-guide.modernisation-platform.service.justice.gov.uk/user-guide/deploying-your-application.html#deploying-your-application)

To remove this role for member accounts through code:

1. Edit the relevant `environment/*.json` file by removing the team name from the `github-oidc-team-repositories` definition for the particular environment e.g. `"github-oidc-team-repositories": ["modernisation-platform"]` becomes `"github-oidc-team-repositories": [""]`

1. Note that only one change to a `environment/*.json` file can be made per PR/run due to current constraints around how the automation works.
1. Raise a PR and once merged the scheduled baseline job will run to update the access accordingly.

#### CircleCI Role

Digital Prison Reporting make use of CircleCI for their pipeline. We manage a `circleci_iam_role` on their behalf which is defined in code [here](https://github.com/ministryofjustice/modernisation-platform/blob/376d57912a779f13b91f4ccbc27d1e06c12f7560/terraform/environments/digital-prison-reporting/iam.tf#L1)

Removing access would be as simple as raising a PR to either remove this code entirely or edit the permissions of the associated policy so that it has limited or no access.

### MP Platform Management Roles

Here is a list of roles/identities that are used to manage the Modernisation Platform with links to the code that creates them. In the event of a compromise we would likely need to follow the steps in the next section to revoke permissions whilst the security incident is being investigated.

#### Bootstrap

- [`github-actions`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/delegate-access/iam.tf#L42) - Role for GitHub Actions
- [`ModernisationPlatformAccess`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/delegate-access/iam.tf#L12) - A role that lives in all accounts (except the Modernisation Platform account) and is assumable by the ModernisationPlatform account with AdministratorAccess permissions. In the case of the testing-test account, this role is also assumable by the `testing-ci` user
- [`AWSSRTSupport`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/delegate-access/iam.tf#L24) - Role to allow AWS SRT to make AWS Shield Advanced and AWS WAF API calls on your behalf and to access your AWS WAF logs.
- [`MemberInfrastructureAccess`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/member-bootstrap/iam.tf#L6) - Role to define what members can manage in their environments
- [`MemberInfrastructureAccessUSEast`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/member-bootstrap/iam.tf#L270) - As above but for US-East region
- [`MemberInfrastructureBedrockEuCentral`](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/bootstrap/member-bootstrap/iam.tf#L489) - Role for members to access to AWS Bedrock

#### Core Logging

- [`athena_lambda`](https://github.com/ministryofjustice/modernisation-platform/blob/576a631c80e16809b846b5a121535cb73045e910/terraform/environments/core-logging/athena.tf#L91) - Role for lambda access to athena

#### Core Network Services

- [`dns`](https://github.com/ministryofjustice/modernisation-platform/blob/576a631c80e16809b846b5a121535cb73045e910/terraform/environments/core-network-services/iam.tf#L12) - Role to allow ci/cd to update DNS records for ACM certificate validation
- [`read-log-records`](https://github.com/ministryofjustice/modernisation-platform/blob/576a631c80e16809b846b5a121535cb73045e910/terraform/environments/core-network-services/iam.tf#L93) - Role to allow developer SSO user to read DNS records for ACM certificate validation for local plan

#### Core Shared Services

- [`image-builder`](https://github.com/ministryofjustice/modernisation-platform/blob/9fcb6df12de7839bc25bd9a5cb5aec506034c9c4/terraform/environments/core-shared-services/iam.tf#L26) - Role to allow member developer SSO user to perform required shared services tasks
- [`LambdaInvoke`](https://github.com/ministryofjustice/modernisation-platform/blob/9fcb6df12de7839bc25bd9a5cb5aec506034c9c4/terraform/environments/core-shared-services/iam.tf#L288) - Role for EventBridge Scheduler to trigger Lambda Function
- [`member-shared-services`](https://github.com/ministryofjustice/modernisation-platform/blob/9fcb6df12de7839bc25bd9a5cb5aec506034c9c4/terraform/environments/core-shared-services/iam.tf#L38) - Role to allow member developer SSO user to perform required shared services tasks

#### Core VPC

- [`member-delegation`](https://github.com/ministryofjustice/modernisation-platform/blob/7029e8493a988922fa703547443025a2a1712e12/terraform/environments/core-vpc/vpc.tf#L203) - A role that sits in the core-vpc accounts and can be assumed by relevant member accounts and ModernisationPlatform account in order to manage networking infrastructure (e.g. DNS, flow logs and EC2's networking)
- [`member-delegation-read-only`](https://github.com/ministryofjustice/modernisation-platform/blob/7029e8493a988922fa703547443025a2a1712e12/terraform/environments/core-vpc/vpc.tf#L329) - Read only role for developer sso plans and for viewing via the console

#### Modernisation Platform

- [`ModernisationPlatformGithubActionsRole`](https://github.com/ministryofjustice/aws-root-account/blob/b47c74781927ffbdb3cfba485d07b05ade7a23b9/management-account/terraform/iam-roles.tf#L161) - Modernisation Platform Github OIDC Role
- [`modernisation-account-limited-read`](https://github.com/ministryofjustice/modernisation-platform/blob/576a631c80e16809b846b5a121535cb73045e910/terraform/modernisation-platform-account/iam.tf#L127) - Limited Read Access in MP Account for Members and CI
- [`modernisation-account-terraform-state`](https://github.com/ministryofjustice/modernisation-platform/blob/576a631c80e16809b846b5a121535cb73045e910/terraform/modernisation-platform-account/iam.tf#L222) - Role allowing Modernisation Platform customers access to Terraform state backend resources

### Urgent Disabling Access to IAM Roles

If there is an **urgent need** to restrict access related iam roles then consider the following two approaches:

#### Revoking IAM role temporary security credentials

To ensure all current sessions using the role are stopped the you can follow the guidance on AWS for [revoking sessions permissions](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_revoke-sessions.html#revoke-session)

This method attaches a new inline policy to the role that denies all permissions to all actions. It includes a condition that applies the restrictions only if the user assumed the role before the point in time when you revoke the permissions.
If the user assumes the role after you revoked the permissions, then the deny policy does not apply to that user.

#### Disabling permissions for temporary security credentials

A more 'belt and braces' approach would be to follow the AWS guidance on [denying access to all sessions associated with a role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_disable-perms.html#deny-access-to-all-sessions)

This procedure denies permissions to **all users** that have permissions to assume a role with a policy like this:

```
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Deny",
      "Action": "*",
      "Resource": "*"
    }
  ]
}
```

## Risks/Caveats

This runbook describes how to revoke access through code which will permanently revoke access in the cleanest manner.
In some cases this **would not** be the quickest way to revoke access.

Depending on the severity of the compromise there should be some thought around
whether it would be better to **temporarily use "clickops" to remove access** before code changes can be released or whether there should be a
dedicated mechanism (pipeline etc.) which can temporarily quarantine a user identity while a security incident is being investigated.

If any roles/identities related to the running of the MP platform are compromised then revoking access will likely remove our ability to make any further updates via code/pipeline so this action should not be taken lightly.
