---
owner_slack: "#modernisation-platform"
title: Instance Scheduling - automatically stop non-production instances overnight
last_reviewed_on: 2025-07-17
review_in: 6 months
---

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NXTCMQ7ZX6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-NXTCMQ7ZX6');
</script>

# <%= current_page.data.title %>

## Feature description

This feature automatically stops non-production EC2 and RDS instances overnight and over each weekend, in order to save on AWS costs and reduce environmental impact. Stopped instances don't incur charges, but Elastic IP addresses or EBS volumes attached to those instances do.

The instances will be [automatically stopped each weekday at 21:00 and started at 06:00 each weekday morning](https://github.com/ministryofjustice/modernisation-platform/blob/main/terraform/environments/core-shared-services/instance-scheduler-lambda-function.tf), which includes shut down on Friday night and startup on Monday morning. By default, this includes every EC2 and RDS instance in every non-production environment (development, test, preproduction) without requiring any configuration from the end user. Users can customise the default behaviour by attaching the `instance-scheduling` tag to EC2 and RDS instances with one of the following values:

- `default` - Automatically stop the instance overnight and start it in the morning. Absence of the `instance-scheduling` tag will have the same effect.
- `skip-scheduling` - Skip auto scheduling for the instance
- `skip-auto-start` - Stop the instance at night, but skip starting it in the morning. This could be useful for the instances we want to make sure are automatically stopped every night, but we are happy to manually start when needed.
- `skip-auto-stop` - Start the instance in the morning, but skip stopping it at night.

Here's a Terraform example of how to add the relevant tag for any EC2 and RDS instance that should not be automatically stopped overnight.

```terraform
  tags = merge(
    local.tags,
    { instance-scheduling = "skip-scheduling" }
  )
```

>EC2 instances that are part of an Auto Scaling group, will be skipped automatically. The presence of the tag `aws:autoscaling:groupName` indicates that the EC2 instance is part of an Auto Scaling group.

Ordering instances and automatically stopping them on public holidays is not supported using this option.

## Setting non-production Member Accounts to the Skipped

For convenience, it is possible to flag an entire non-production member account to be skipped. This is done via the addition of the field "instance_scheduler_skip": ["true"] to the environment list in the account .json file in modernisation-platform/environments.

The example below shows this:

```
{
  "account-type": "member",
  "environments": [
    {
      "name": "development",
      "access": [
        {
          "sso_group_name": "modernisation-platform",
          "level": "sandbox"
        },
        ---
      ],
      "instance_scheduler_skip": ["true"],
      "nuke": "rebuild"
    }
  ],
  "tags": {
    "application": "modernisation-platform",
     ---
  },
  "github-oidc-team-repositories": [""],
  "go-live-date": ""
}

```

To check whether an account being skipped or not, check the logs of the latest workflow "Build-test-push" in the Instance Scheduler [repository](https://github.com/ministryofjustice/modernisation-platform-instance-scheduler). It will show the log output of any unit tests of the Go source and specifically details of any accounts that were excluded & why.

For example:

```
Account is of type member: nomis
extractNames - Found name: nomis.development
extractNames - Found name: nomis.test
extractNames - Skipping due to instance_scheduler_skip: nomis.preproduction
extractNames - Skipping due to production: nomis.production
```


## Custom Shutdown & Startup Schedules

For those teams that require the shutdown & startup of ec2 & rds resources in a specific order or at different times, the option exists to make use of github workflows & cron schedules to stop & start services.

- These workflows can be run from the application source github [via the use of oidc for authentication to the Modernisation Platform](https://user-guide.modernisation-platform.service.justice.gov.uk/user-guide/deploying-your-application.html#deploying-your-application). It is recommended to hold the AWS account number for the member account as a github secret, especially if the repo is public.

- An example of how to use a github workflow to meet this requirement can be [found here](https://github.com/ministryofjustice/modernisation-platform-configuration-management/blob/main/.github/workflows/flexible-instance-stop-start.yml). Note that the workflow uses [a separate script](https://github.com/ministryofjustice/modernisation-platform-configuration-management/blob/main/scripts/flexistopstart.sh) to run the AWS CLI commands for shutdown & startup. These can be easily reused & customised to meet specific needs. 

- EC2 or RDS resources that are stopped or started in this manner must have the `skip-scheduling` tag added as described above.

- Note that there are some restrictions that come with using github schedules - most importantly that github themselves do not guarantee execution of the action at the specified time. Actions can be delayed at busy times or even dropped entirely so it is recommended to avoid schedules running on-the-hour or half-hour.

Further information regarding github schedule events can be [found here](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule).

## References

1. [GitHub repository](https://github.com/ministryofjustice/modernisation-platform-instance-scheduler)
