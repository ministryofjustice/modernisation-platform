---
title: How to import SSL certificates into AWS Certificate Manager
last_reviewed_on: 2022-03-24
review_in: 3 months
---

# <%= current_page.data.title %>

## Introduction

If you are not using a standard Modernisation Platform domain for your app, you will need to import your SSL certificate into your AWS account and apply it to your infrastructure. This guide **does not** cover the infrastructure element of this, only the import of SSL certificates into your AWS account.

This assumes you have a basic understanding of SSL concepts, and access to openssl on the command line.

The steps are:

* Generate a certificate signing request (CSR)
* Request a certificate using that CSR
* Complete the certificate request
* Export the complete certificate
* Import the exported certificate data to your AWS account
* Apply the certificate ARN to your app

If you already have your exported SSL certificate in PFX format, skip direct to step 5 (certificate data extraction).

**There may be a better way**. If so, let us know!

## 1. Generate the CSR (Certificate Signing Request)

On Windows, use PowerShell to execute the `certreq -new` command.

[On Linux](https://www.tecmint.com/generate-csr-certificate-signing-request-in-linux/), you need the OpenSSL command line utility installed on your system, otherwise, run the following command to install it.

```
$ sudo apt install openssl  [On Debian/Ubuntu]
$ sudo yum install openssl  [On CentOS/RHEL]
$ sudo dnf install openssl  [On Fedora]
```

Then issue the following command to generate a CSR and the key that will protect your certificate.

```
$ openssl req -new -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr
```

where:

- req enables the part of OpenSSL that handles certificate requests signing.
- **-newkey rsa:2048** creates a 2048-bit RSA key.
- **-nodes** means "don't encrypt the key".
- **-keyout example.com.key** specifies the filename to write on the created private key.
- **-out example.com.csr** specifies the filename to write the CSR to.

## 2. Request certificate

Email certificates@digital.justice.gov.uk with the CSR(s) and domain(s), and they will send the certificates.

Note these will be just text files with the certificate data - no private key, and no certification chain (this is important later).

## 3. Local certificate import

On Windows, use PowerShell to complete the certificate request, e.g.  `certreq -accept .\hmpps-your-app.service.justice.gov.uk.crt.txt`

You should see something like:

```
Installed Certificate:
Serial Number: a6700xxxxxxxxde8f8002
Subject: CN=hmpps-your-app.service.justice.gov.uk (DNS Name=hmpps-your-app.service.justice.gov.uk, DNS Name=www.hmpps-your-app.service.justice.gov.uk)
NotBefore: 21/03/2022 00:00
NotAfter: 15/04/2023 23:59
Thumbprint: fad171bxxxxxxxx27d40f
```

[On Linux](https://support.kerioconnect.gfi.com/hc/en-us/articles/360015200119-Adding-Trusted-Root-Certificates-to-the-Server) (Debian/Ubuntu)

- Copy your CA to dir `/usr/local/share/ca-certificates/`
- Use command: `sudo cp hmpps-your-app.service.justice.gov.uk.crt.txt /usr/local/share/ca-certificates/hmpps-your-app.service.justice.gov.uk.crt`
- Update the CA store: `sudo update-ca-certificates`

On Linux (CentOS/RHEL)

- Install the ca-certificates package: `yum install ca-certificates`
- Enable the dynamic CA configuration feature: `update-ca-trust force-enable`
- Add it as a new file to /etc/pki/ca-trust/source/anchors/: `cp hmpps-your-app.service.justice.gov.uk.crt.txt /etc/pki/ca-trust/source/anchors/hmpps-your-app.service.justice.gov.uk.crt`
- Use command: `update-ca-trust extract`

## 4. Local certificate export

Use the Windows Certificate Manager MMC to export the certificate. It should be in "Personal". 

  * Say "Yes" to export the private key
  * Use .PFX as the format
  * Check "include all certificates in the certification path if possible"
  * Specify a password (not a Windows user) for security
  * Export to a file

**TODO** This step describes the GUI method. Investigate using PowerShell `Export-PfxCertificate` command (https://docs.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2022-ps)

[On Linux](https://docs.oracle.com/cd/E54932_01/doc.705/e54936/cssg_create_ssl_cert.htm#CSVSG181)

Export the certificate to a certificate file.

    keytool -export -alias alias_name -keystore path_to_keystore_file -rfc -file path_to_certificate_file

where:

- **alias_name**: Specifies the same alias that was used to generate the certificate.
- **path_to_keystore_file**: Specifies the same KeyStore path that was used to generate the certificate.
- **path_to_certificate_file**: Specifies the exported certificate file, often given an extension of .cert.

## 5. Certificate data extraction to plaintext

In a terminal, use this command to extract the certificate and private key: `openssl pkcs12 -in prod-2022.pfx -out prod-cert.txt -nodes`

Where "prod-2022.pfx" is the exported PFX file from the previous step, and "prod-cert.txt" is the output file containing plaintext certificate data. You will be prompted for the password you specified in the previous step.

The certificate block in this file should match the certificate block from step 2, but now the file will also contain a private key, and additional blocks for the certificate trust chain. "Your" certificate block will have your domain in the metadata.

## 6. AWS import

In AWS Certificate Manager, import the certificate using the data in the exported plaintext file from the previous step (certificate body, certificate private key, and full certificate chain). 

Regular Modernisation Platform AWS accounts do not have permission to import certificates, so a member of the core team will need to do this for you.

You can use the AWS Parameter Store to share the cert and key data with the Modernisation Platform team. The total length of the private key, certificate and chain exceeds the 4096 character limit for parameters, so we suggest creating multiple parameters:

* One for the private key
* One for your main certificate block
* One parameter **each** for each block in the certificate chain

If your are renewing an existing certificate, note that AWS Certificate Manager also allows you to re-import an existing certificate with new values. We suggest you avoid this in case something goes wrong. Importing a **new** certificate with the same domain as an existing certificate is allowed.

When importing the certificate, AWS may tell you that the trust chain is optional, but it's not. All of the additional certificate blocks (except your "main" cert) must be pasted into this field.

It's fine to include the metadata (e.g. "bag attributes") when pasting certificate data into the import fields.

## 7. Attach new certificates

Copy the ARN of your new certificate, edit the certificate ARN in Terraform, raise a PR and re-deploy the environment(s) to apply the new certificate.

`modernisation-platform-environments\terraform\environments\your-app\application_variables.json` (it's the `cert_arn` value)

Test that your app working correctly, and check that the certificate expiry date reflects your new certificate.

## 8. Cleanup

Clean up any copies of your certificate data (plaintext or otherwise). Remove:

* local copies of certificates from your cert store
* local copies of certificate data in text files
* certificate data in AWS parameter store
